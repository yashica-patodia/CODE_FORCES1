#include<bits/stdc++.h> using namespace std; #define ll long long int #define LD long double const int N = 100010; int inf = 1e9; int mod = 1e9 + 7; signed main() { //freopen("IN", "r", stdin); //freopen("OUT", "w", stdout); ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; cin >> n; ll a[n]; for(int i = 0; i < n; i++) cin >> a[i]; ll dp[n][n]; memset(dp, 0, sizeof(dp)); ll mini[n][n], maxi[n][n]; memset(mini, 0, sizeof(maxi)); memset(maxi, 0, sizeof(maxi)); for(int i = 0; i < n; i++) { mini[i][i] = a[i]; maxi[i][i] = a[i]; for(int j = i + 1; j < n; j++) { mini[i][j] = min(mini[i][j - 1], a[j]); maxi[i][j] = max(maxi[i][j - 1], a[j]); } } for(int len = 1; len <= n; len++) { for(int i = 0; i < n; i++) { int j = i + len - 1; if(j >= n) break; dp[i][j] = 0; if(i + 1 <= j) dp[i][j] += mini[i + 1][j] 
int solve(int i, int j) { if(dp[i][j] != -1) return dp[i][j]; dp[i][j] = inf; for(int r = i; r <= j; r++) { int Fr = mini[i][r - 1] + maxi[i][r - 1] + mini[i + 1][j] + maxi[i + 1][j]; int curVal = Fr + solve(i, r - 1) + solve(r + 1, j) + Fr; dp[i][j] = min(dp[i][j], curVal); } return dp[i][j]; }